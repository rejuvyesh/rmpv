#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
# Copyright rejuvyesh <mail@rejuvyesh.com>, 2013

require "shellwords"
require "to_name"
require "rmpv"
require 'highline/import'

def yesno(prompt = 'Continue?', default = true)
  a = ''
  s = default ? '[Y/n]' : '[y/N]'
  d = default ? 'y' : 'n'
  until %w[y n].include? a
    a = ask("#{prompt} #{s} ") { |q| q.limit = 1; q.case = :downcase }
    a = d if a.length == 0
  end
  a == 'y'
end

# check if there is a .mp file in the current directory and add it as options
if File.exists? ".mp"
  File.open(".mp", "r").each do |line|
    ARGV << line.chomp
  end
end

# parse options
cmd, options = Rmpv::Option.parse(ARGV)
cmd = Rmpv::Option.command(cmd, options)

# begin execution
file = Shellwords.shelljoin(ARGV)
mpv = cmd.join(" ") + " " + file
puts "running '#{mpv}'..."

progress = 0
time = 0

# set as watching
if options[:method] == 'show'
  show = ToName.to_name(file)
  @trak = Rmpv::Trakt.new
  wat = Thread.new do
    loop do
      duration = @trak.watching(show, progress)
      sleep(600) # wait for 10 minutes
      time += 10
      progress = time*100/duration
      puts progress
    end
  end
end

if options[:method] == 'movie'
  movie = ToName.to_name(file)
  @trak = Rmpv::Trakt.new
  wat = Thread.new do
    loop do
      duration = @trak.watching(movie, progress, 'movie')
      sleep(900) # wait for 15 minutes
      time += 10
      progress = time*100/duration
      puts progress
    end
  end
end


pid = spawn(mpv)
Process.wait(pid)

Thread.kill(wat)

# mark as seen on trakt
if options[:method] == 'show'
  show = ToName.to_name(file)
  @trak = Rmpv::Trakt.new
  puts progress
  if progress>=50
    @trak.scrobble(show, progress)
  else
    choice = yesno("Did not complete. Do you still want to scrobble?", false)
    if choice == 'y'
      @trak.scrobble(show, progress)
    else
      exit
    end
  end
end

if options[:method] == 'movie'
  movie = ToName.to_name(file)
  @trak = Rmpv::Trakt.new
  puts progress
  if progress>=50
    @trak.scrobble(movie, progress, 'movie')
  else
    choice = yesno("Did not complete. Do you still want to scrobble?", false)
    if choice == 'y'
      @trak.scrobble(movie, progress, 'movie')
    else
      exit
    end
  end
end

if options[:method] == 'anime'
  @anime = Rmpv::Myanimelist.new
  ani, ep = Rmpv::Myanimelist.parse(file)
  @anime.scrobble(ani, ep)
end
